#!/bin/bash

############
# SETUP

set -e -x
scripts_dir=$(cd $(dirname $0)/..; pwd)
source ${scripts_dir}/lib/dependencies
source ${scripts_dir}/lib/keypairs
source ${scripts_dir}/lib/cloudformation

############

require_deployment_dir
require_aws_environment

require_command aws
require_command bosh-init
require_command jq
require_command spiff

ruby_major_ver=`ruby -v | awk '{ print $2}' | awk -F. '{ print $1 }'`
if [ "${ruby_major_ver}" -lt "2" ]; then
  echo "Please use Ruby >=2.*"
  echo "Otherwise, bosh fails to parse json templates"
  exit 1
fi

mkdir -p ${DEPLOYMENT_DIR}/artifacts/keypair
mkdir -p ${DEPLOYMENT_DIR}/artifacts/deployments
mkdir -p generated-stubs

# create keypair
create_keypair bosh

# install certs for Concourse ELB
if ! aws iam get-server-certificate --server-certificate-name concourse; then
  if [ -e ${DEPLOYMENT_DIR}/certs/concourse_chain.pem ]; then
    aws iam upload-server-certificate --server-certificate-name concourse --private-key file://${DEPLOYMENT_DIR}/certs/concourse.key --certificate-body file://${DEPLOYMENT_DIR}/certs/concourse.pem  --certificate-chain file://${DEPLOYMENT_DIR}/certs/concourse_chain.pem
  else
    aws iam upload-server-certificate --server-certificate-name concourse --private-key file://${DEPLOYMENT_DIR}/certs/concourse.key --certificate-body file://${DEPLOYMENT_DIR}/certs/concourse.pem
  fi
fi

# deploy infrastructure
cloud_form bosh

# generate AWS resources stub for shared purposes
get_stub_from_stack bosh

# generate stub for BOSH Security Group Name
BOSH_SECURITY_GROUP_ID=$(cat generated-stubs/bosh-aws-resources.json | jq -r .Resources.BOSHSecurityGroup)
BOSH_SECURITY_GROUP_NAME=$(aws ec2 describe-security-groups --group-ids ${BOSH_SECURITY_GROUP_ID} | jq -r .SecurityGroups[0].GroupName)

cat > generated-stubs/security-groups.yml <<EOF
{
  "SecurityGroups": {
    "BOSH_SECURITY_GROUP_NAME": "${BOSH_SECURITY_GROUP_NAME}"
  }
}
EOF

# generate stub for AWS Credentials
BOSH_SUBNET_ID=$(cat generated-stubs/bosh-aws-resources.json | jq -r .Resources.BOSHSubnet)
AWS_ZONE=$(aws ec2 describe-subnets --subnet-ids ${BOSH_SUBNET_ID} | jq -r .Subnets[0].AvailabilityZone)

cat > generated-stubs/aws-credentials.yml <<EOF
{
  "AWSCredentials": {
    "AWS_ZONE": "${AWS_ZONE}",
    "AWS_DEFAULT_REGION": "${AWS_DEFAULT_REGION}",
    "AWS_ACCESS_KEY_ID": "${AWS_ACCESS_KEY_ID}",
    "AWS_SECRET_ACCESS_KEY": "${AWS_SECRET_ACCESS_KEY}"
  }
}
EOF

# generate BOSH deployment manifest
echo "# GENERATED: NO TOUCHING" > ${DEPLOYMENT_DIR}/artifacts/deployments/bosh.yml
spiff merge ${scripts_dir}/../templates/infrastructure/bosh-init.yml \
  ${scripts_dir}/../templates/infrastructure/bosh.yml \
  generated-stubs/aws-credentials.yml \
  generated-stubs/bosh-aws-resources.json \
  generated-stubs/security-groups.yml \
  ${DEPLOYMENT_DIR}/stubs/bosh/bosh_passwords.yml \
  >> ${DEPLOYMENT_DIR}/artifacts/deployments/bosh.yml

# deploy BOSH
bosh-init deploy ${DEPLOYMENT_DIR}/artifacts/deployments/bosh.yml

# display result
BOSH_IP=$(cat generated-stubs/bosh-aws-resources.json | jq -r .Resources.MicroEIP)
echo "BOSH director is at $BOSH_IP"

# clean up
rm -rf generated-stubs

