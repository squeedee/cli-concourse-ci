#!/bin/bash

set -e -x

script_dir=$(dirname $0)

source ${script_dir}/lib/deployment_utils

require_deployment_dir
require_aws_environment

command -v aws >/dev/null || { echo "aws is required"; exit 1; }
command -v bosh-init >/dev/null || { echo "bosh-init is required"; exit 1; }
command -v jq >/dev/null || { echo "jq is required"; exit 1; }
command -v spiff >/dev/null || { echo "spiff is required"; exit 1; }

mkdir -p ${DEPLOYMENT_DIR}/artifacts/keypair
mkdir -p ${DEPLOYMENT_DIR}/artifacts/deployments
mkdir -p ${DEPLOYMENT_DIR}/generated-stubs/cf
mkdir -p generated-stubs

# create keypair
if ! aws ec2 describe-key-pairs --key-names bosh; then
  aws ec2 create-key-pair --key-name bosh | jq -r .KeyMaterial > ${DEPLOYMENT_DIR}/artifacts/keypair/id_rsa_bosh
fi

# install certs for Concourse ELB
if ! aws iam get-server-certificate --server-certificate-name concourse; then
  if [ -e ${DEPLOYMENT_DIR}/certs/concourse_chain.pem ]; then
    aws iam upload-server-certificate --server-certificate-name concourse --private-key file://${DEPLOYMENT_DIR}/certs/concourse.key --certificate-body file://${DEPLOYMENT_DIR}/certs/concourse.pem  --certificate-chain file://${DEPLOYMENT_DIR}/certs/concourse_chain.pem
  else
    aws iam upload-server-certificate --server-certificate-name concourse --private-key file://${DEPLOYMENT_DIR}/certs/concourse.key --certificate-body file://${DEPLOYMENT_DIR}/certs/concourse.pem
  fi
fi

# deploy infrastructure
if ! aws cloudformation describe-stacks --stack-name concourse ; then
  if [ -e ${DEPLOYMENT_DIR}/cloud_formation/properties.json ]; then
    aws cloudformation create-stack \
      --stack-name concourse \
      --template-body file://${script_dir}/../templates/infrastructure/cloudformation.json \
      --parameters file://${DEPLOYMENT_DIR}/cloud_formation/properties.json
  else
    aws cloudformation create-stack \
      --stack-name concourse \
      --template-body file://${script_dir}/../templates/infrastructure/cloudformation.json
  fi
else
  if [ -e ${DEPLOYMENT_DIR}/cloud_formation/properties.json ]; then
    aws cloudformation update-stack \
      --stack-name concourse \
      --template-body file://${script_dir}/../templates/infrastructure/cloudformation.json \
      --parameters file://${DEPLOYMENT_DIR}/cloud_formation/properties.json || true # update-stack is not idempotent :(
  else
    aws cloudformation update-stack \
          --stack-name concourse \
          --template-body file://${script_dir}/../templates/infrastructure/cloudformation.json || true # update-stack is not idempotent :(
  fi
fi

while aws cloudformation describe-stacks --stack-name concourse | grep StackStatus | grep IN_PROGRESS ; do
  echo "CloudFormation stack 'concourse' still in progress..."
  sleep 15
done

if aws cloudformation describe-stacks --stack-name concourse | grep StackStatus | grep ROLLBACK ; then
  echo 'Cloud formation failure'
  exit 1
fi

if ! aws cloudformation describe-stacks --stack-name concourse | grep StackStatus | grep COMPLETE ; then
  echo 'Cloud formation failure'
  exit 1
fi

# generate AWS resources stub for shared purposes
aws cloudformation describe-stack-resources --stack-name concourse \
  | jq '.StackResources|map({key: .LogicalResourceId, value: .PhysicalResourceId}) | from_entries as $body | {Resources: $body}' \
  > generated-stubs/aws-resources.json

# generate stub for BOSH Security Group Name
BOSH_SECURITY_GROUP_ID=$(cat generated-stubs/aws-resources.json | jq -r .Resources.BOSHSecurityGroup)
BOSH_SECURITY_GROUP_NAME=$(aws ec2 describe-security-groups --group-ids ${BOSH_SECURITY_GROUP_ID} | jq -r .SecurityGroups[0].GroupName)

cat > generated-stubs/security-groups.yml <<EOF
{
  "SecurityGroups": {
    "BOSH_SECURITY_GROUP_NAME": "${BOSH_SECURITY_GROUP_NAME}"
  }
}
EOF

# generate stub for AWS Credentials
BOSH_SUBNET_ID=$(cat generated-stubs/aws-resources.json | jq -r .Resources.BOSHSubnet)
AWS_ZONE=$(aws ec2 describe-subnets --subnet-ids ${BOSH_SUBNET_ID} | jq -r .Subnets[0].AvailabilityZone)

cat > generated-stubs/aws-credentials.yml <<EOF
{
  "AWSCredentials": {
    "AWS_ZONE": "${AWS_ZONE}",
    "AWS_DEFAULT_REGION": "${AWS_DEFAULT_REGION}",
    "AWS_ACCESS_KEY_ID": "${AWS_ACCESS_KEY_ID}",
    "AWS_SECRET_ACCESS_KEY": "${AWS_SECRET_ACCESS_KEY}"
  }
}
EOF

# generate BOSH deployment manifest
echo "# GENERATED: NO TOUCHING" > ${DEPLOYMENT_DIR}/artifacts/deployments/bosh.yml
spiff merge ${script_dir}/../templates/infrastructure/bosh-init.yml \
  ${script_dir}/../templates/infrastructure/bosh.yml \
  generated-stubs/aws-credentials.yml \
  generated-stubs/aws-resources.json \
  generated-stubs/security-groups.yml \
  ${DEPLOYMENT_DIR}/stubs/bosh/bosh_passwords.yml \
  >> ${DEPLOYMENT_DIR}/artifacts/deployments/bosh.yml

# deploy BOSH
bosh-init deploy ${DEPLOYMENT_DIR}/artifacts/deployments/bosh.yml

# display result
BOSH_IP=$(cat generated-stubs/aws-resources.json | jq -r .Resources.MicroEIP)
echo "BOSH director is at $BOSH_IP"

# generate director uuid stub for cf
BOSH_DIRECTOR_UUID=$(bosh -t ${BOSH_IP} status --uuid)
cat > ${DEPLOYMENT_DIR}/generated-stubs/cf/director-uuid.yml <<EOF
---
director_uuid: ${BOSH_DIRECTOR_UUID}
EOF

# clean up
rm -rf generated-stubs

